-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from Grammar/Par.y
-----------------------------------------------------------------------------

state 150 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> ListTopDef                              (4)
	TopDef -> Type Ident '(' ListArg ')' Block         (5)
	TopDef -> Type ListItem ';'                        (6)
	TopDef -> 'final' Type ListItem ';'                (7)
	ListTopDef -> TopDef                               (8)
	ListTopDef -> TopDef ListTopDef                    (9)
	Arg -> Type Ident                                  (10)
	ListArg ->                                         (11)
	ListArg -> Arg                                     (12)
	ListArg -> Arg ',' ListArg                         (13)
	Block -> '{' ListStmt '}'                          (14)
	ListStmt ->                                        (15)
	ListStmt -> Stmt ListStmt                          (16)
	Stmt -> ';'                                        (17)
	Stmt -> Block                                      (18)
	Stmt -> Type ListItem ';'                          (19)
	Stmt -> 'final' Type ListItem ';'                  (20)
	Stmt -> Ident '=' Expr ';'                         (21)
	Stmt -> Ident '++' ';'                             (22)
	Stmt -> Ident '--' ';'                             (23)
	Stmt -> 'return' Expr ';'                          (24)
	Stmt -> 'return' ';'                               (25)
	Stmt -> 'if' '(' Expr ')' Stmt                     (26)
	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt         (27)
	Stmt -> 'while' '(' Expr ')' Stmt                  (28)
	Stmt -> Expr ';'                                   (29)
	Stmt -> Type Ident '(' ListArg ')' Block           (30)
	Stmt -> 'for' '(' Type Ident '=' Expr 'to' Expr ')' Stmt   (31)
	Stmt -> 'break' ';'                                (32)
	Stmt -> 'continue' ';'                             (33)
	Stmt -> 'print' '(' Expr ')' ';'                   (34)
	Item -> Ident                                      (35)
	Item -> Ident '=' Expr                             (36)
	ListItem -> Item                                   (37)
	ListItem -> Item ',' ListItem                      (38)
	Type -> 'int'                                      (39)
	Type -> 'string'                                   (40)
	Type -> 'boolean'                                  (41)
	Type -> 'void'                                     (42)
	Type -> 'fun' '(' ListType '->' Type ')'           (43)
	ListType ->                                        (44)
	ListType -> Type                                   (45)
	ListType -> Type ',' ListType                      (46)
	Expr6 -> Ident                                     (47)
	Expr6 -> Integer                                   (48)
	Expr6 -> 'true'                                    (49)
	Expr6 -> 'false'                                   (50)
	Expr6 -> Ident '(' ListExpr ')'                    (51)
	Expr6 -> String                                    (52)
	Expr6 -> 'lambda' '(' ListArg ')' ':' Type Block   (53)
	Expr6 -> '(' Expr ')'                              (54)
	Expr5 -> '-' Expr6                                 (55)
	Expr5 -> '!' Expr6                                 (56)
	Expr5 -> Expr6                                     (57)
	Expr4 -> Expr4 MulOp Expr5                         (58)
	Expr4 -> Expr5                                     (59)
	Expr3 -> Expr3 AddOp Expr4                         (60)
	Expr3 -> Expr4                                     (61)
	Expr2 -> Expr2 RelOp Expr3                         (62)
	Expr2 -> Expr3                                     (63)
	Expr1 -> Expr2 '&&' Expr1                          (64)
	Expr1 -> Expr2                                     (65)
	Expr -> Expr1 '||' Expr                            (66)
	Expr -> Expr1                                      (67)
	ListExpr ->                                        (68)
	ListExpr -> Expr                                   (69)
	ListExpr -> Expr ',' ListExpr                      (70)
	AddOp -> '+'                                       (71)
	AddOp -> '-'                                       (72)
	MulOp -> '*'                                       (73)
	MulOp -> '/'                                       (74)
	MulOp -> '%'                                       (75)
	RelOp -> '<'                                       (76)
	RelOp -> '<='                                      (77)
	RelOp -> '>'                                       (78)
	RelOp -> '>='                                      (79)
	RelOp -> '=='                                      (80)
	RelOp -> '!='                                      (81)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	'++'           { PT _ (TS _ 9) }
	','            { PT _ (TS _ 10) }
	'-'            { PT _ (TS _ 11) }
	'--'           { PT _ (TS _ 12) }
	'->'           { PT _ (TS _ 13) }
	'/'            { PT _ (TS _ 14) }
	':'            { PT _ (TS _ 15) }
	';'            { PT _ (TS _ 16) }
	'<'            { PT _ (TS _ 17) }
	'<='           { PT _ (TS _ 18) }
	'='            { PT _ (TS _ 19) }
	'=='           { PT _ (TS _ 20) }
	'>'            { PT _ (TS _ 21) }
	'>='           { PT _ (TS _ 22) }
	'boolean'      { PT _ (TS _ 23) }
	'break'        { PT _ (TS _ 24) }
	'continue'     { PT _ (TS _ 25) }
	'else'         { PT _ (TS _ 26) }
	'false'        { PT _ (TS _ 27) }
	'final'        { PT _ (TS _ 28) }
	'for'          { PT _ (TS _ 29) }
	'fun'          { PT _ (TS _ 30) }
	'if'           { PT _ (TS _ 31) }
	'int'          { PT _ (TS _ 32) }
	'lambda'       { PT _ (TS _ 33) }
	'print'        { PT _ (TS _ 34) }
	'return'       { PT _ (TS _ 35) }
	'string'       { PT _ (TS _ 36) }
	'to'           { PT _ (TS _ 37) }
	'true'         { PT _ (TS _ 38) }
	'void'         { PT _ (TS _ 39) }
	'while'        { PT _ (TS _ 40) }
	'{'            { PT _ (TS _ 41) }
	'||'           { PT _ (TS _ 42) }
	'}'            { PT _ (TS _ 43) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	TopDef          rules 5, 6, 7
	ListTopDef      rules 8, 9
	Arg             rule  10
	ListArg         rules 11, 12, 13
	Block           rule  14
	ListStmt        rules 15, 16
	Stmt            rules 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34
	Item            rules 35, 36
	ListItem        rules 37, 38
	Type            rules 39, 40, 41, 42, 43
	ListType        rules 44, 45, 46
	Expr6           rules 47, 48, 49, 50, 51, 52, 53, 54
	Expr5           rules 55, 56, 57
	Expr4           rules 58, 59
	Expr3           rules 60, 61
	Expr2           rules 62, 63
	Expr1           rules 64, 65
	Expr            rules 66, 67
	ListExpr        rules 68, 69, 70
	AddOp           rules 71, 72
	MulOp           rules 73, 74, 75
	RelOp           rules 76, 77, 78, 79, 80, 81

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'boolean'      shift, and enter state 7
	'final'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Program        goto state 3
	TopDef         goto state 4
	ListTopDef     goto state 5
	Type           goto state 6

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'to'           reduce using rule 1
	'||'           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	ListTopDef -> TopDef .                              (rule 8)
	ListTopDef -> TopDef . ListTopDef                   (rule 9)

	'boolean'      shift, and enter state 7
	'final'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12
	%eof           reduce using rule 8

	TopDef         goto state 4
	ListTopDef     goto state 18
	Type           goto state 6

State 5

	Program -> ListTopDef .                             (rule 4)

	%eof           reduce using rule 4


State 6

	TopDef -> Type . Ident '(' ListArg ')' Block        (rule 5)
	TopDef -> Type . ListItem ';'                       (rule 6)

	L_Ident        shift, and enter state 2

	Ident          goto state 15
	Item           goto state 16
	ListItem       goto state 17

State 7

	Type -> 'boolean' .                                 (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	'{'            reduce using rule 41
	L_Ident        reduce using rule 41


State 8

	TopDef -> 'final' . Type ListItem ';'               (rule 7)

	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Type           goto state 14

State 9

	Type -> 'fun' . '(' ListType '->' Type ')'          (rule 43)

	'('            shift, and enter state 13


State 10

	Type -> 'int' .                                     (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	'{'            reduce using rule 39
	L_Ident        reduce using rule 39


State 11

	Type -> 'string' .                                  (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	'{'            reduce using rule 40
	L_Ident        reduce using rule 40


State 12

	Type -> 'void' .                                    (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	'{'            reduce using rule 42
	L_Ident        reduce using rule 42


State 13

	Type -> 'fun' '(' . ListType '->' Type ')'          (rule 43)

	'->'           reduce using rule 44
	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Type           goto state 25
	ListType       goto state 26

State 14

	TopDef -> 'final' Type . ListItem ';'               (rule 7)

	L_Ident        shift, and enter state 2

	Ident          goto state 23
	Item           goto state 16
	ListItem       goto state 24

State 15

	TopDef -> Type Ident . '(' ListArg ')' Block        (rule 5)
	Item -> Ident .                                     (rule 35)
	Item -> Ident . '=' Expr                            (rule 36)

	'('            shift, and enter state 21
	','            reduce using rule 35
	';'            reduce using rule 35
	'='            shift, and enter state 22


State 16

	ListItem -> Item .                                  (rule 37)
	ListItem -> Item . ',' ListItem                     (rule 38)

	','            shift, and enter state 20
	';'            reduce using rule 37


State 17

	TopDef -> Type ListItem . ';'                       (rule 6)

	';'            shift, and enter state 19


State 18

	ListTopDef -> TopDef ListTopDef .                   (rule 9)

	%eof           reduce using rule 9


State 19

	TopDef -> Type ListItem ';' .                       (rule 6)

	'boolean'      reduce using rule 6
	'final'        reduce using rule 6
	'fun'          reduce using rule 6
	'int'          reduce using rule 6
	'string'       reduce using rule 6
	'void'         reduce using rule 6
	%eof           reduce using rule 6


State 20

	ListItem -> Item ',' . ListItem                     (rule 38)

	L_Ident        shift, and enter state 2

	Ident          goto state 23
	Item           goto state 16
	ListItem       goto state 51

State 21

	TopDef -> Type Ident '(' . ListArg ')' Block        (rule 5)

	')'            reduce using rule 11
	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Arg            goto state 48
	ListArg        goto state 49
	Type           goto state 50

State 22

	Item -> Ident '=' . Expr                            (rule 36)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 39

State 23

	Item -> Ident .                                     (rule 35)
	Item -> Ident . '=' Expr                            (rule 36)

	','            reduce using rule 35
	';'            reduce using rule 35
	'='            shift, and enter state 22


State 24

	TopDef -> 'final' Type ListItem . ';'               (rule 7)

	';'            shift, and enter state 29


State 25

	ListType -> Type .                                  (rule 45)
	ListType -> Type . ',' ListType                     (rule 46)

	','            shift, and enter state 28
	'->'           reduce using rule 45


State 26

	Type -> 'fun' '(' ListType . '->' Type ')'          (rule 43)

	'->'           shift, and enter state 27


State 27

	Type -> 'fun' '(' ListType '->' . Type ')'          (rule 43)

	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Type           goto state 77

State 28

	ListType -> Type ',' . ListType                     (rule 46)

	'->'           reduce using rule 44
	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Type           goto state 25
	ListType       goto state 76

State 29

	TopDef -> 'final' Type ListItem ';' .               (rule 7)

	'boolean'      reduce using rule 7
	'final'        reduce using rule 7
	'fun'          reduce using rule 7
	'int'          reduce using rule 7
	'string'       reduce using rule 7
	'void'         reduce using rule 7
	%eof           reduce using rule 7


State 30

	Expr6 -> Ident .                                    (rule 47)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 51)

	'!='           reduce using rule 47
	'%'            reduce using rule 47
	'&&'           reduce using rule 47
	'('            shift, and enter state 75
	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'to'           reduce using rule 47
	'||'           reduce using rule 47


State 31

	Expr6 -> Integer .                                  (rule 48)

	'!='           reduce using rule 48
	'%'            reduce using rule 48
	'&&'           reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'to'           reduce using rule 48
	'||'           reduce using rule 48


State 32

	Expr6 -> String .                                   (rule 52)

	'!='           reduce using rule 52
	'%'            reduce using rule 52
	'&&'           reduce using rule 52
	')'            reduce using rule 52
	'*'            reduce using rule 52
	'+'            reduce using rule 52
	','            reduce using rule 52
	'-'            reduce using rule 52
	'/'            reduce using rule 52
	';'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'to'           reduce using rule 52
	'||'           reduce using rule 52


State 33

	Expr5 -> Expr6 .                                    (rule 57)

	'!='           reduce using rule 57
	'%'            reduce using rule 57
	'&&'           reduce using rule 57
	')'            reduce using rule 57
	'*'            reduce using rule 57
	'+'            reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	'/'            reduce using rule 57
	';'            reduce using rule 57
	'<'            reduce using rule 57
	'<='           reduce using rule 57
	'=='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'to'           reduce using rule 57
	'||'           reduce using rule 57


State 34

	Expr4 -> Expr5 .                                    (rule 59)

	'!='           reduce using rule 59
	'%'            reduce using rule 59
	'&&'           reduce using rule 59
	')'            reduce using rule 59
	'*'            reduce using rule 59
	'+'            reduce using rule 59
	','            reduce using rule 59
	'-'            reduce using rule 59
	'/'            reduce using rule 59
	';'            reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'to'           reduce using rule 59
	'||'           reduce using rule 59


State 35

	Expr4 -> Expr4 . MulOp Expr5                        (rule 58)
	Expr3 -> Expr4 .                                    (rule 61)

	'!='           reduce using rule 61
	'%'            shift, and enter state 72
	'&&'           reduce using rule 61
	')'            reduce using rule 61
	'*'            shift, and enter state 73
	'+'            reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'/'            shift, and enter state 74
	';'            reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'to'           reduce using rule 61
	'||'           reduce using rule 61

	MulOp          goto state 71

State 36

	Expr3 -> Expr3 . AddOp Expr4                        (rule 60)
	Expr2 -> Expr3 .                                    (rule 63)

	'!='           reduce using rule 63
	'&&'           reduce using rule 63
	')'            reduce using rule 63
	'+'            shift, and enter state 69
	','            reduce using rule 63
	'-'            shift, and enter state 70
	';'            reduce using rule 63
	'<'            reduce using rule 63
	'<='           reduce using rule 63
	'=='           reduce using rule 63
	'>'            reduce using rule 63
	'>='           reduce using rule 63
	'to'           reduce using rule 63
	'||'           reduce using rule 63

	AddOp          goto state 68

State 37

	Expr2 -> Expr2 . RelOp Expr3                        (rule 62)
	Expr1 -> Expr2 . '&&' Expr1                         (rule 64)
	Expr1 -> Expr2 .                                    (rule 65)

	'!='           shift, and enter state 61
	'&&'           shift, and enter state 62
	')'            reduce using rule 65
	','            reduce using rule 65
	';'            reduce using rule 65
	'<'            shift, and enter state 63
	'<='           shift, and enter state 64
	'=='           shift, and enter state 65
	'>'            shift, and enter state 66
	'>='           shift, and enter state 67
	'to'           reduce using rule 65
	'||'           reduce using rule 65

	RelOp          goto state 60

State 38

	Expr -> Expr1 . '||' Expr                           (rule 66)
	Expr -> Expr1 .                                     (rule 67)

	')'            reduce using rule 67
	','            reduce using rule 67
	';'            reduce using rule 67
	'to'           reduce using rule 67
	'||'           shift, and enter state 59


State 39

	Item -> Ident '=' Expr .                            (rule 36)

	','            reduce using rule 36
	';'            reduce using rule 36


State 40

	Expr5 -> '!' . Expr6                                (rule 56)

	'('            shift, and enter state 41
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 58

State 41

	Expr6 -> '(' . Expr ')'                             (rule 54)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 57

State 42

	Expr5 -> '-' . Expr6                                (rule 55)

	'('            shift, and enter state 41
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 56

State 43

	Expr6 -> 'false' .                                  (rule 50)

	'!='           reduce using rule 50
	'%'            reduce using rule 50
	'&&'           reduce using rule 50
	')'            reduce using rule 50
	'*'            reduce using rule 50
	'+'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'/'            reduce using rule 50
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'=='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'to'           reduce using rule 50
	'||'           reduce using rule 50


State 44

	Expr6 -> 'lambda' . '(' ListArg ')' ':' Type Block    (rule 53)

	'('            shift, and enter state 55


State 45

	Expr6 -> 'true' .                                   (rule 49)

	'!='           reduce using rule 49
	'%'            reduce using rule 49
	'&&'           reduce using rule 49
	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            reduce using rule 49
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'to'           reduce using rule 49
	'||'           reduce using rule 49


State 46

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'&&'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'to'           reduce using rule 2
	'||'           reduce using rule 2


State 47

	String -> L_quoted .                                (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&&'           reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'to'           reduce using rule 3
	'||'           reduce using rule 3


State 48

	ListArg -> Arg .                                    (rule 12)
	ListArg -> Arg . ',' ListArg                        (rule 13)

	')'            reduce using rule 12
	','            shift, and enter state 54


State 49

	TopDef -> Type Ident '(' ListArg . ')' Block        (rule 5)

	')'            shift, and enter state 53


State 50

	Arg -> Type . Ident                                 (rule 10)

	L_Ident        shift, and enter state 2

	Ident          goto state 52

State 51

	ListItem -> Item ',' ListItem .                     (rule 38)

	';'            reduce using rule 38


State 52

	Arg -> Type Ident .                                 (rule 10)

	')'            reduce using rule 10
	','            reduce using rule 10


State 53

	TopDef -> Type Ident '(' ListArg ')' . Block        (rule 5)

	'{'            shift, and enter state 90

	Block          goto state 89

State 54

	ListArg -> Arg ',' . ListArg                        (rule 13)

	')'            reduce using rule 11
	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Arg            goto state 48
	ListArg        goto state 88
	Type           goto state 50

State 55

	Expr6 -> 'lambda' '(' . ListArg ')' ':' Type Block    (rule 53)

	')'            reduce using rule 11
	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Arg            goto state 48
	ListArg        goto state 87
	Type           goto state 50

State 56

	Expr5 -> '-' Expr6 .                                (rule 55)

	'!='           reduce using rule 55
	'%'            reduce using rule 55
	'&&'           reduce using rule 55
	')'            reduce using rule 55
	'*'            reduce using rule 55
	'+'            reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	'/'            reduce using rule 55
	';'            reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'=='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'to'           reduce using rule 55
	'||'           reduce using rule 55


State 57

	Expr6 -> '(' Expr . ')'                             (rule 54)

	')'            shift, and enter state 86


State 58

	Expr5 -> '!' Expr6 .                                (rule 56)

	'!='           reduce using rule 56
	'%'            reduce using rule 56
	'&&'           reduce using rule 56
	')'            reduce using rule 56
	'*'            reduce using rule 56
	'+'            reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	'/'            reduce using rule 56
	';'            reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'=='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'to'           reduce using rule 56
	'||'           reduce using rule 56


State 59

	Expr -> Expr1 '||' . Expr                           (rule 66)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 85

State 60

	Expr2 -> Expr2 RelOp . Expr3                        (rule 62)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 84

State 61

	RelOp -> '!=' .                                     (rule 81)

	'!'            reduce using rule 81
	'('            reduce using rule 81
	'-'            reduce using rule 81
	'false'        reduce using rule 81
	'lambda'       reduce using rule 81
	'true'         reduce using rule 81
	L_Ident        reduce using rule 81
	L_integ        reduce using rule 81
	L_quoted       reduce using rule 81


State 62

	Expr1 -> Expr2 '&&' . Expr1                         (rule 64)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 83

State 63

	RelOp -> '<' .                                      (rule 76)

	'!'            reduce using rule 76
	'('            reduce using rule 76
	'-'            reduce using rule 76
	'false'        reduce using rule 76
	'lambda'       reduce using rule 76
	'true'         reduce using rule 76
	L_Ident        reduce using rule 76
	L_integ        reduce using rule 76
	L_quoted       reduce using rule 76


State 64

	RelOp -> '<=' .                                     (rule 77)

	'!'            reduce using rule 77
	'('            reduce using rule 77
	'-'            reduce using rule 77
	'false'        reduce using rule 77
	'lambda'       reduce using rule 77
	'true'         reduce using rule 77
	L_Ident        reduce using rule 77
	L_integ        reduce using rule 77
	L_quoted       reduce using rule 77


State 65

	RelOp -> '==' .                                     (rule 80)

	'!'            reduce using rule 80
	'('            reduce using rule 80
	'-'            reduce using rule 80
	'false'        reduce using rule 80
	'lambda'       reduce using rule 80
	'true'         reduce using rule 80
	L_Ident        reduce using rule 80
	L_integ        reduce using rule 80
	L_quoted       reduce using rule 80


State 66

	RelOp -> '>' .                                      (rule 78)

	'!'            reduce using rule 78
	'('            reduce using rule 78
	'-'            reduce using rule 78
	'false'        reduce using rule 78
	'lambda'       reduce using rule 78
	'true'         reduce using rule 78
	L_Ident        reduce using rule 78
	L_integ        reduce using rule 78
	L_quoted       reduce using rule 78


State 67

	RelOp -> '>=' .                                     (rule 79)

	'!'            reduce using rule 79
	'('            reduce using rule 79
	'-'            reduce using rule 79
	'false'        reduce using rule 79
	'lambda'       reduce using rule 79
	'true'         reduce using rule 79
	L_Ident        reduce using rule 79
	L_integ        reduce using rule 79
	L_quoted       reduce using rule 79


State 68

	Expr3 -> Expr3 AddOp . Expr4                        (rule 60)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 82

State 69

	AddOp -> '+' .                                      (rule 71)

	'!'            reduce using rule 71
	'('            reduce using rule 71
	'-'            reduce using rule 71
	'false'        reduce using rule 71
	'lambda'       reduce using rule 71
	'true'         reduce using rule 71
	L_Ident        reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71


State 70

	AddOp -> '-' .                                      (rule 72)

	'!'            reduce using rule 72
	'('            reduce using rule 72
	'-'            reduce using rule 72
	'false'        reduce using rule 72
	'lambda'       reduce using rule 72
	'true'         reduce using rule 72
	L_Ident        reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72


State 71

	Expr4 -> Expr4 MulOp . Expr5                        (rule 58)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 81

State 72

	MulOp -> '%' .                                      (rule 75)

	'!'            reduce using rule 75
	'('            reduce using rule 75
	'-'            reduce using rule 75
	'false'        reduce using rule 75
	'lambda'       reduce using rule 75
	'true'         reduce using rule 75
	L_Ident        reduce using rule 75
	L_integ        reduce using rule 75
	L_quoted       reduce using rule 75


State 73

	MulOp -> '*' .                                      (rule 73)

	'!'            reduce using rule 73
	'('            reduce using rule 73
	'-'            reduce using rule 73
	'false'        reduce using rule 73
	'lambda'       reduce using rule 73
	'true'         reduce using rule 73
	L_Ident        reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73


State 74

	MulOp -> '/' .                                      (rule 74)

	'!'            reduce using rule 74
	'('            reduce using rule 74
	'-'            reduce using rule 74
	'false'        reduce using rule 74
	'lambda'       reduce using rule 74
	'true'         reduce using rule 74
	L_Ident        reduce using rule 74
	L_integ        reduce using rule 74
	L_quoted       reduce using rule 74


State 75

	Expr6 -> Ident '(' . ListExpr ')'                   (rule 51)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	')'            reduce using rule 68
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 79
	ListExpr       goto state 80

State 76

	ListType -> Type ',' ListType .                     (rule 46)

	'->'           reduce using rule 46


State 77

	Type -> 'fun' '(' ListType '->' Type . ')'          (rule 43)

	')'            shift, and enter state 78


State 78

	Type -> 'fun' '(' ListType '->' Type ')' .          (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	'{'            reduce using rule 43
	L_Ident        reduce using rule 43


State 79

	ListExpr -> Expr .                                  (rule 69)
	ListExpr -> Expr . ',' ListExpr                     (rule 70)

	')'            reduce using rule 69
	','            shift, and enter state 108


State 80

	Expr6 -> Ident '(' ListExpr . ')'                   (rule 51)

	')'            shift, and enter state 107


State 81

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 58)

	'!='           reduce using rule 58
	'%'            reduce using rule 58
	'&&'           reduce using rule 58
	')'            reduce using rule 58
	'*'            reduce using rule 58
	'+'            reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'/'            reduce using rule 58
	';'            reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'=='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'to'           reduce using rule 58
	'||'           reduce using rule 58


State 82

	Expr4 -> Expr4 . MulOp Expr5                        (rule 58)
	Expr3 -> Expr3 AddOp Expr4 .                        (rule 60)

	'!='           reduce using rule 60
	'%'            shift, and enter state 72
	'&&'           reduce using rule 60
	')'            reduce using rule 60
	'*'            shift, and enter state 73
	'+'            reduce using rule 60
	','            reduce using rule 60
	'-'            reduce using rule 60
	'/'            shift, and enter state 74
	';'            reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'to'           reduce using rule 60
	'||'           reduce using rule 60

	MulOp          goto state 71

State 83

	Expr1 -> Expr2 '&&' Expr1 .                         (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64
	';'            reduce using rule 64
	'to'           reduce using rule 64
	'||'           reduce using rule 64


State 84

	Expr3 -> Expr3 . AddOp Expr4                        (rule 60)
	Expr2 -> Expr2 RelOp Expr3 .                        (rule 62)

	'!='           reduce using rule 62
	'&&'           reduce using rule 62
	')'            reduce using rule 62
	'+'            shift, and enter state 69
	','            reduce using rule 62
	'-'            shift, and enter state 70
	';'            reduce using rule 62
	'<'            reduce using rule 62
	'<='           reduce using rule 62
	'=='           reduce using rule 62
	'>'            reduce using rule 62
	'>='           reduce using rule 62
	'to'           reduce using rule 62
	'||'           reduce using rule 62

	AddOp          goto state 68

State 85

	Expr -> Expr1 '||' Expr .                           (rule 66)

	')'            reduce using rule 66
	','            reduce using rule 66
	';'            reduce using rule 66
	'to'           reduce using rule 66


State 86

	Expr6 -> '(' Expr ')' .                             (rule 54)

	'!='           reduce using rule 54
	'%'            reduce using rule 54
	'&&'           reduce using rule 54
	')'            reduce using rule 54
	'*'            reduce using rule 54
	'+'            reduce using rule 54
	','            reduce using rule 54
	'-'            reduce using rule 54
	'/'            reduce using rule 54
	';'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'=='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'to'           reduce using rule 54
	'||'           reduce using rule 54


State 87

	Expr6 -> 'lambda' '(' ListArg . ')' ':' Type Block    (rule 53)

	')'            shift, and enter state 106


State 88

	ListArg -> Arg ',' ListArg .                        (rule 13)

	')'            reduce using rule 13


State 89

	TopDef -> Type Ident '(' ListArg ')' Block .        (rule 5)

	'boolean'      reduce using rule 5
	'final'        reduce using rule 5
	'fun'          reduce using rule 5
	'int'          reduce using rule 5
	'string'       reduce using rule 5
	'void'         reduce using rule 5
	%eof           reduce using rule 5


State 90

	Block -> '{' . ListStmt '}'                         (rule 14)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'false'        shift, and enter state 43
	'final'        shift, and enter state 100
	'for'          shift, and enter state 101
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 102
	'int'          shift, and enter state 10
	'lambda'       shift, and enter state 44
	'print'        shift, and enter state 103
	'return'       shift, and enter state 104
	'string'       shift, and enter state 11
	'true'         shift, and enter state 45
	'void'         shift, and enter state 12
	'while'        shift, and enter state 105
	'{'            shift, and enter state 90
	'}'            reduce using rule 15
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	Block          goto state 92
	ListStmt       goto state 93
	Stmt           goto state 94
	Type           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 91

	Stmt -> Ident . '=' Expr ';'                        (rule 21)
	Stmt -> Ident . '++' ';'                            (rule 22)
	Stmt -> Ident . '--' ';'                            (rule 23)
	Expr6 -> Ident .                                    (rule 47)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 51)

	'!='           reduce using rule 47
	'%'            reduce using rule 47
	'&&'           reduce using rule 47
	'('            shift, and enter state 75
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	'++'           shift, and enter state 125
	'-'            reduce using rule 47
	'--'           shift, and enter state 126
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'='            shift, and enter state 127
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'||'           reduce using rule 47


State 92

	Stmt -> Block .                                     (rule 18)

	'!'            reduce using rule 18
	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'boolean'      reduce using rule 18
	'break'        reduce using rule 18
	'continue'     reduce using rule 18
	'else'         reduce using rule 18
	'false'        reduce using rule 18
	'final'        reduce using rule 18
	'for'          reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'int'          reduce using rule 18
	'lambda'       reduce using rule 18
	'print'        reduce using rule 18
	'return'       reduce using rule 18
	'string'       reduce using rule 18
	'true'         reduce using rule 18
	'void'         reduce using rule 18
	'while'        reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18


State 93

	Block -> '{' ListStmt . '}'                         (rule 14)

	'}'            shift, and enter state 124


State 94

	ListStmt -> Stmt . ListStmt                         (rule 16)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'false'        shift, and enter state 43
	'final'        shift, and enter state 100
	'for'          shift, and enter state 101
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 102
	'int'          shift, and enter state 10
	'lambda'       shift, and enter state 44
	'print'        shift, and enter state 103
	'return'       shift, and enter state 104
	'string'       shift, and enter state 11
	'true'         shift, and enter state 45
	'void'         shift, and enter state 12
	'while'        shift, and enter state 105
	'{'            shift, and enter state 90
	'}'            reduce using rule 15
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	Block          goto state 92
	ListStmt       goto state 123
	Stmt           goto state 94
	Type           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 95

	Stmt -> Type . ListItem ';'                         (rule 19)
	Stmt -> Type . Ident '(' ListArg ')' Block          (rule 30)

	L_Ident        shift, and enter state 2

	Ident          goto state 121
	Item           goto state 16
	ListItem       goto state 122

State 96

	Stmt -> Expr . ';'                                  (rule 29)

	';'            shift, and enter state 120


State 97

	Stmt -> ';' .                                       (rule 17)

	'!'            reduce using rule 17
	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'boolean'      reduce using rule 17
	'break'        reduce using rule 17
	'continue'     reduce using rule 17
	'else'         reduce using rule 17
	'false'        reduce using rule 17
	'final'        reduce using rule 17
	'for'          reduce using rule 17
	'fun'          reduce using rule 17
	'if'           reduce using rule 17
	'int'          reduce using rule 17
	'lambda'       reduce using rule 17
	'print'        reduce using rule 17
	'return'       reduce using rule 17
	'string'       reduce using rule 17
	'true'         reduce using rule 17
	'void'         reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17


State 98

	Stmt -> 'break' . ';'                               (rule 32)

	';'            shift, and enter state 119


State 99

	Stmt -> 'continue' . ';'                            (rule 33)

	';'            shift, and enter state 118


State 100

	Stmt -> 'final' . Type ListItem ';'                 (rule 20)

	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Type           goto state 117

State 101

	Stmt -> 'for' . '(' Type Ident '=' Expr 'to' Expr ')' Stmt    (rule 31)

	'('            shift, and enter state 116


State 102

	Stmt -> 'if' . '(' Expr ')' Stmt                    (rule 26)
	Stmt -> 'if' . '(' Expr ')' Stmt 'else' Stmt        (rule 27)

	'('            shift, and enter state 115


State 103

	Stmt -> 'print' . '(' Expr ')' ';'                  (rule 34)

	'('            shift, and enter state 114


State 104

	Stmt -> 'return' . Expr ';'                         (rule 24)
	Stmt -> 'return' . ';'                              (rule 25)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 113
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 112

State 105

	Stmt -> 'while' . '(' Expr ')' Stmt                 (rule 28)

	'('            shift, and enter state 111


State 106

	Expr6 -> 'lambda' '(' ListArg ')' . ':' Type Block    (rule 53)

	':'            shift, and enter state 110


State 107

	Expr6 -> Ident '(' ListExpr ')' .                   (rule 51)

	'!='           reduce using rule 51
	'%'            reduce using rule 51
	'&&'           reduce using rule 51
	')'            reduce using rule 51
	'*'            reduce using rule 51
	'+'            reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'/'            reduce using rule 51
	';'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'to'           reduce using rule 51
	'||'           reduce using rule 51


State 108

	ListExpr -> Expr ',' . ListExpr                     (rule 70)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	')'            reduce using rule 68
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 79
	ListExpr       goto state 109

State 109

	ListExpr -> Expr ',' ListExpr .                     (rule 70)

	')'            reduce using rule 70


State 110

	Expr6 -> 'lambda' '(' ListArg ')' ':' . Type Block    (rule 53)

	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Type           goto state 139

State 111

	Stmt -> 'while' '(' . Expr ')' Stmt                 (rule 28)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 138

State 112

	Stmt -> 'return' Expr . ';'                         (rule 24)

	';'            shift, and enter state 137


State 113

	Stmt -> 'return' ';' .                              (rule 25)

	'!'            reduce using rule 25
	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'boolean'      reduce using rule 25
	'break'        reduce using rule 25
	'continue'     reduce using rule 25
	'else'         reduce using rule 25
	'false'        reduce using rule 25
	'final'        reduce using rule 25
	'for'          reduce using rule 25
	'fun'          reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'lambda'       reduce using rule 25
	'print'        reduce using rule 25
	'return'       reduce using rule 25
	'string'       reduce using rule 25
	'true'         reduce using rule 25
	'void'         reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	L_Ident        reduce using rule 25
	L_integ        reduce using rule 25
	L_quoted       reduce using rule 25


State 114

	Stmt -> 'print' '(' . Expr ')' ';'                  (rule 34)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 136

State 115

	Stmt -> 'if' '(' . Expr ')' Stmt                    (rule 26)
	Stmt -> 'if' '(' . Expr ')' Stmt 'else' Stmt        (rule 27)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 135

State 116

	Stmt -> 'for' '(' . Type Ident '=' Expr 'to' Expr ')' Stmt    (rule 31)

	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Type           goto state 134

State 117

	Stmt -> 'final' Type . ListItem ';'                 (rule 20)

	L_Ident        shift, and enter state 2

	Ident          goto state 23
	Item           goto state 16
	ListItem       goto state 133

State 118

	Stmt -> 'continue' ';' .                            (rule 33)

	'!'            reduce using rule 33
	'('            reduce using rule 33
	'-'            reduce using rule 33
	';'            reduce using rule 33
	'boolean'      reduce using rule 33
	'break'        reduce using rule 33
	'continue'     reduce using rule 33
	'else'         reduce using rule 33
	'false'        reduce using rule 33
	'final'        reduce using rule 33
	'for'          reduce using rule 33
	'fun'          reduce using rule 33
	'if'           reduce using rule 33
	'int'          reduce using rule 33
	'lambda'       reduce using rule 33
	'print'        reduce using rule 33
	'return'       reduce using rule 33
	'string'       reduce using rule 33
	'true'         reduce using rule 33
	'void'         reduce using rule 33
	'while'        reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	L_Ident        reduce using rule 33
	L_integ        reduce using rule 33
	L_quoted       reduce using rule 33


State 119

	Stmt -> 'break' ';' .                               (rule 32)

	'!'            reduce using rule 32
	'('            reduce using rule 32
	'-'            reduce using rule 32
	';'            reduce using rule 32
	'boolean'      reduce using rule 32
	'break'        reduce using rule 32
	'continue'     reduce using rule 32
	'else'         reduce using rule 32
	'false'        reduce using rule 32
	'final'        reduce using rule 32
	'for'          reduce using rule 32
	'fun'          reduce using rule 32
	'if'           reduce using rule 32
	'int'          reduce using rule 32
	'lambda'       reduce using rule 32
	'print'        reduce using rule 32
	'return'       reduce using rule 32
	'string'       reduce using rule 32
	'true'         reduce using rule 32
	'void'         reduce using rule 32
	'while'        reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	L_Ident        reduce using rule 32
	L_integ        reduce using rule 32
	L_quoted       reduce using rule 32


State 120

	Stmt -> Expr ';' .                                  (rule 29)

	'!'            reduce using rule 29
	'('            reduce using rule 29
	'-'            reduce using rule 29
	';'            reduce using rule 29
	'boolean'      reduce using rule 29
	'break'        reduce using rule 29
	'continue'     reduce using rule 29
	'else'         reduce using rule 29
	'false'        reduce using rule 29
	'final'        reduce using rule 29
	'for'          reduce using rule 29
	'fun'          reduce using rule 29
	'if'           reduce using rule 29
	'int'          reduce using rule 29
	'lambda'       reduce using rule 29
	'print'        reduce using rule 29
	'return'       reduce using rule 29
	'string'       reduce using rule 29
	'true'         reduce using rule 29
	'void'         reduce using rule 29
	'while'        reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	L_Ident        reduce using rule 29
	L_integ        reduce using rule 29
	L_quoted       reduce using rule 29


State 121

	Stmt -> Type Ident . '(' ListArg ')' Block          (rule 30)
	Item -> Ident .                                     (rule 35)
	Item -> Ident . '=' Expr                            (rule 36)

	'('            shift, and enter state 132
	','            reduce using rule 35
	';'            reduce using rule 35
	'='            shift, and enter state 22


State 122

	Stmt -> Type ListItem . ';'                         (rule 19)

	';'            shift, and enter state 131


State 123

	ListStmt -> Stmt ListStmt .                         (rule 16)

	'}'            reduce using rule 16


State 124

	Block -> '{' ListStmt '}' .                         (rule 14)

	'!'            reduce using rule 14
	'!='           reduce using rule 14
	'%'            reduce using rule 14
	'&&'           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	','            reduce using rule 14
	'-'            reduce using rule 14
	'/'            reduce using rule 14
	';'            reduce using rule 14
	'<'            reduce using rule 14
	'<='           reduce using rule 14
	'=='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'boolean'      reduce using rule 14
	'break'        reduce using rule 14
	'continue'     reduce using rule 14
	'else'         reduce using rule 14
	'false'        reduce using rule 14
	'final'        reduce using rule 14
	'for'          reduce using rule 14
	'fun'          reduce using rule 14
	'if'           reduce using rule 14
	'int'          reduce using rule 14
	'lambda'       reduce using rule 14
	'print'        reduce using rule 14
	'return'       reduce using rule 14
	'string'       reduce using rule 14
	'to'           reduce using rule 14
	'true'         reduce using rule 14
	'void'         reduce using rule 14
	'while'        reduce using rule 14
	'{'            reduce using rule 14
	'||'           reduce using rule 14
	'}'            reduce using rule 14
	L_Ident        reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14
	%eof           reduce using rule 14


State 125

	Stmt -> Ident '++' . ';'                            (rule 22)

	';'            shift, and enter state 130


State 126

	Stmt -> Ident '--' . ';'                            (rule 23)

	';'            shift, and enter state 129


State 127

	Stmt -> Ident '=' . Expr ';'                        (rule 21)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 128

State 128

	Stmt -> Ident '=' Expr . ';'                        (rule 21)

	';'            shift, and enter state 147


State 129

	Stmt -> Ident '--' ';' .                            (rule 23)

	'!'            reduce using rule 23
	'('            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'boolean'      reduce using rule 23
	'break'        reduce using rule 23
	'continue'     reduce using rule 23
	'else'         reduce using rule 23
	'false'        reduce using rule 23
	'final'        reduce using rule 23
	'for'          reduce using rule 23
	'fun'          reduce using rule 23
	'if'           reduce using rule 23
	'int'          reduce using rule 23
	'lambda'       reduce using rule 23
	'print'        reduce using rule 23
	'return'       reduce using rule 23
	'string'       reduce using rule 23
	'true'         reduce using rule 23
	'void'         reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	L_Ident        reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23


State 130

	Stmt -> Ident '++' ';' .                            (rule 22)

	'!'            reduce using rule 22
	'('            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'boolean'      reduce using rule 22
	'break'        reduce using rule 22
	'continue'     reduce using rule 22
	'else'         reduce using rule 22
	'false'        reduce using rule 22
	'final'        reduce using rule 22
	'for'          reduce using rule 22
	'fun'          reduce using rule 22
	'if'           reduce using rule 22
	'int'          reduce using rule 22
	'lambda'       reduce using rule 22
	'print'        reduce using rule 22
	'return'       reduce using rule 22
	'string'       reduce using rule 22
	'true'         reduce using rule 22
	'void'         reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	L_Ident        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22


State 131

	Stmt -> Type ListItem ';' .                         (rule 19)

	'!'            reduce using rule 19
	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'boolean'      reduce using rule 19
	'break'        reduce using rule 19
	'continue'     reduce using rule 19
	'else'         reduce using rule 19
	'false'        reduce using rule 19
	'final'        reduce using rule 19
	'for'          reduce using rule 19
	'fun'          reduce using rule 19
	'if'           reduce using rule 19
	'int'          reduce using rule 19
	'lambda'       reduce using rule 19
	'print'        reduce using rule 19
	'return'       reduce using rule 19
	'string'       reduce using rule 19
	'true'         reduce using rule 19
	'void'         reduce using rule 19
	'while'        reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19


State 132

	Stmt -> Type Ident '(' . ListArg ')' Block          (rule 30)

	')'            reduce using rule 11
	'boolean'      shift, and enter state 7
	'fun'          shift, and enter state 9
	'int'          shift, and enter state 10
	'string'       shift, and enter state 11
	'void'         shift, and enter state 12

	Arg            goto state 48
	ListArg        goto state 146
	Type           goto state 50

State 133

	Stmt -> 'final' Type ListItem . ';'                 (rule 20)

	';'            shift, and enter state 145


State 134

	Stmt -> 'for' '(' Type . Ident '=' Expr 'to' Expr ')' Stmt    (rule 31)

	L_Ident        shift, and enter state 2

	Ident          goto state 144

State 135

	Stmt -> 'if' '(' Expr . ')' Stmt                    (rule 26)
	Stmt -> 'if' '(' Expr . ')' Stmt 'else' Stmt        (rule 27)

	')'            shift, and enter state 143


State 136

	Stmt -> 'print' '(' Expr . ')' ';'                  (rule 34)

	')'            shift, and enter state 142


State 137

	Stmt -> 'return' Expr ';' .                         (rule 24)

	'!'            reduce using rule 24
	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'boolean'      reduce using rule 24
	'break'        reduce using rule 24
	'continue'     reduce using rule 24
	'else'         reduce using rule 24
	'false'        reduce using rule 24
	'final'        reduce using rule 24
	'for'          reduce using rule 24
	'fun'          reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'lambda'       reduce using rule 24
	'print'        reduce using rule 24
	'return'       reduce using rule 24
	'string'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	L_Ident        reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24


State 138

	Stmt -> 'while' '(' Expr . ')' Stmt                 (rule 28)

	')'            shift, and enter state 141


State 139

	Expr6 -> 'lambda' '(' ListArg ')' ':' Type . Block    (rule 53)

	'{'            shift, and enter state 90

	Block          goto state 140

State 140

	Expr6 -> 'lambda' '(' ListArg ')' ':' Type Block .    (rule 53)

	'!='           reduce using rule 53
	'%'            reduce using rule 53
	'&&'           reduce using rule 53
	')'            reduce using rule 53
	'*'            reduce using rule 53
	'+'            reduce using rule 53
	','            reduce using rule 53
	'-'            reduce using rule 53
	'/'            reduce using rule 53
	';'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'to'           reduce using rule 53
	'||'           reduce using rule 53


State 141

	Stmt -> 'while' '(' Expr ')' . Stmt                 (rule 28)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'false'        shift, and enter state 43
	'final'        shift, and enter state 100
	'for'          shift, and enter state 101
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 102
	'int'          shift, and enter state 10
	'lambda'       shift, and enter state 44
	'print'        shift, and enter state 103
	'return'       shift, and enter state 104
	'string'       shift, and enter state 11
	'true'         shift, and enter state 45
	'void'         shift, and enter state 12
	'while'        shift, and enter state 105
	'{'            shift, and enter state 90
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	Block          goto state 92
	Stmt           goto state 152
	Type           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 142

	Stmt -> 'print' '(' Expr ')' . ';'                  (rule 34)

	';'            shift, and enter state 151


State 143

	Stmt -> 'if' '(' Expr ')' . Stmt                    (rule 26)
	Stmt -> 'if' '(' Expr ')' . Stmt 'else' Stmt        (rule 27)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'false'        shift, and enter state 43
	'final'        shift, and enter state 100
	'for'          shift, and enter state 101
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 102
	'int'          shift, and enter state 10
	'lambda'       shift, and enter state 44
	'print'        shift, and enter state 103
	'return'       shift, and enter state 104
	'string'       shift, and enter state 11
	'true'         shift, and enter state 45
	'void'         shift, and enter state 12
	'while'        shift, and enter state 105
	'{'            shift, and enter state 90
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	Block          goto state 92
	Stmt           goto state 150
	Type           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 144

	Stmt -> 'for' '(' Type Ident . '=' Expr 'to' Expr ')' Stmt    (rule 31)

	'='            shift, and enter state 149


State 145

	Stmt -> 'final' Type ListItem ';' .                 (rule 20)

	'!'            reduce using rule 20
	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'boolean'      reduce using rule 20
	'break'        reduce using rule 20
	'continue'     reduce using rule 20
	'else'         reduce using rule 20
	'false'        reduce using rule 20
	'final'        reduce using rule 20
	'for'          reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'int'          reduce using rule 20
	'lambda'       reduce using rule 20
	'print'        reduce using rule 20
	'return'       reduce using rule 20
	'string'       reduce using rule 20
	'true'         reduce using rule 20
	'void'         reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20


State 146

	Stmt -> Type Ident '(' ListArg . ')' Block          (rule 30)

	')'            shift, and enter state 148


State 147

	Stmt -> Ident '=' Expr ';' .                        (rule 21)

	'!'            reduce using rule 21
	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'boolean'      reduce using rule 21
	'break'        reduce using rule 21
	'continue'     reduce using rule 21
	'else'         reduce using rule 21
	'false'        reduce using rule 21
	'final'        reduce using rule 21
	'for'          reduce using rule 21
	'fun'          reduce using rule 21
	'if'           reduce using rule 21
	'int'          reduce using rule 21
	'lambda'       reduce using rule 21
	'print'        reduce using rule 21
	'return'       reduce using rule 21
	'string'       reduce using rule 21
	'true'         reduce using rule 21
	'void'         reduce using rule 21
	'while'        reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21


State 148

	Stmt -> Type Ident '(' ListArg ')' . Block          (rule 30)

	'{'            shift, and enter state 90

	Block          goto state 155

State 149

	Stmt -> 'for' '(' Type Ident '=' . Expr 'to' Expr ')' Stmt    (rule 31)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 154

State 150

	Stmt -> 'if' '(' Expr ')' Stmt .                    (rule 26)
	Stmt -> 'if' '(' Expr ')' Stmt . 'else' Stmt        (rule 27)

	'!'            reduce using rule 26
	'('            reduce using rule 26
	'-'            reduce using rule 26
	';'            reduce using rule 26
	'boolean'      reduce using rule 26
	'break'        reduce using rule 26
	'continue'     reduce using rule 26
	'else'         shift, and enter state 153
			(reduce using rule 26)

	'false'        reduce using rule 26
	'final'        reduce using rule 26
	'for'          reduce using rule 26
	'fun'          reduce using rule 26
	'if'           reduce using rule 26
	'int'          reduce using rule 26
	'lambda'       reduce using rule 26
	'print'        reduce using rule 26
	'return'       reduce using rule 26
	'string'       reduce using rule 26
	'true'         reduce using rule 26
	'void'         reduce using rule 26
	'while'        reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	L_Ident        reduce using rule 26
	L_integ        reduce using rule 26
	L_quoted       reduce using rule 26


State 151

	Stmt -> 'print' '(' Expr ')' ';' .                  (rule 34)

	'!'            reduce using rule 34
	'('            reduce using rule 34
	'-'            reduce using rule 34
	';'            reduce using rule 34
	'boolean'      reduce using rule 34
	'break'        reduce using rule 34
	'continue'     reduce using rule 34
	'else'         reduce using rule 34
	'false'        reduce using rule 34
	'final'        reduce using rule 34
	'for'          reduce using rule 34
	'fun'          reduce using rule 34
	'if'           reduce using rule 34
	'int'          reduce using rule 34
	'lambda'       reduce using rule 34
	'print'        reduce using rule 34
	'return'       reduce using rule 34
	'string'       reduce using rule 34
	'true'         reduce using rule 34
	'void'         reduce using rule 34
	'while'        reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	L_Ident        reduce using rule 34
	L_integ        reduce using rule 34
	L_quoted       reduce using rule 34


State 152

	Stmt -> 'while' '(' Expr ')' Stmt .                 (rule 28)

	'!'            reduce using rule 28
	'('            reduce using rule 28
	'-'            reduce using rule 28
	';'            reduce using rule 28
	'boolean'      reduce using rule 28
	'break'        reduce using rule 28
	'continue'     reduce using rule 28
	'else'         reduce using rule 28
	'false'        reduce using rule 28
	'final'        reduce using rule 28
	'for'          reduce using rule 28
	'fun'          reduce using rule 28
	'if'           reduce using rule 28
	'int'          reduce using rule 28
	'lambda'       reduce using rule 28
	'print'        reduce using rule 28
	'return'       reduce using rule 28
	'string'       reduce using rule 28
	'true'         reduce using rule 28
	'void'         reduce using rule 28
	'while'        reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	L_Ident        reduce using rule 28
	L_integ        reduce using rule 28
	L_quoted       reduce using rule 28


State 153

	Stmt -> 'if' '(' Expr ')' Stmt 'else' . Stmt        (rule 27)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'false'        shift, and enter state 43
	'final'        shift, and enter state 100
	'for'          shift, and enter state 101
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 102
	'int'          shift, and enter state 10
	'lambda'       shift, and enter state 44
	'print'        shift, and enter state 103
	'return'       shift, and enter state 104
	'string'       shift, and enter state 11
	'true'         shift, and enter state 45
	'void'         shift, and enter state 12
	'while'        shift, and enter state 105
	'{'            shift, and enter state 90
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	Block          goto state 92
	Stmt           goto state 157
	Type           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 154

	Stmt -> 'for' '(' Type Ident '=' Expr . 'to' Expr ')' Stmt    (rule 31)

	'to'           shift, and enter state 156


State 155

	Stmt -> Type Ident '(' ListArg ')' Block .          (rule 30)

	'!'            reduce using rule 30
	'('            reduce using rule 30
	'-'            reduce using rule 30
	';'            reduce using rule 30
	'boolean'      reduce using rule 30
	'break'        reduce using rule 30
	'continue'     reduce using rule 30
	'else'         reduce using rule 30
	'false'        reduce using rule 30
	'final'        reduce using rule 30
	'for'          reduce using rule 30
	'fun'          reduce using rule 30
	'if'           reduce using rule 30
	'int'          reduce using rule 30
	'lambda'       reduce using rule 30
	'print'        reduce using rule 30
	'return'       reduce using rule 30
	'string'       reduce using rule 30
	'true'         reduce using rule 30
	'void'         reduce using rule 30
	'while'        reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	L_Ident        reduce using rule 30
	L_integ        reduce using rule 30
	L_quoted       reduce using rule 30


State 156

	Stmt -> 'for' '(' Type Ident '=' Expr 'to' . Expr ')' Stmt    (rule 31)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 158

State 157

	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt .        (rule 27)

	'!'            reduce using rule 27
	'('            reduce using rule 27
	'-'            reduce using rule 27
	';'            reduce using rule 27
	'boolean'      reduce using rule 27
	'break'        reduce using rule 27
	'continue'     reduce using rule 27
	'else'         reduce using rule 27
	'false'        reduce using rule 27
	'final'        reduce using rule 27
	'for'          reduce using rule 27
	'fun'          reduce using rule 27
	'if'           reduce using rule 27
	'int'          reduce using rule 27
	'lambda'       reduce using rule 27
	'print'        reduce using rule 27
	'return'       reduce using rule 27
	'string'       reduce using rule 27
	'true'         reduce using rule 27
	'void'         reduce using rule 27
	'while'        reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	L_Ident        reduce using rule 27
	L_integ        reduce using rule 27
	L_quoted       reduce using rule 27


State 158

	Stmt -> 'for' '(' Type Ident '=' Expr 'to' Expr . ')' Stmt    (rule 31)

	')'            shift, and enter state 159


State 159

	Stmt -> 'for' '(' Type Ident '=' Expr 'to' Expr ')' . Stmt    (rule 31)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'boolean'      shift, and enter state 7
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'false'        shift, and enter state 43
	'final'        shift, and enter state 100
	'for'          shift, and enter state 101
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 102
	'int'          shift, and enter state 10
	'lambda'       shift, and enter state 44
	'print'        shift, and enter state 103
	'return'       shift, and enter state 104
	'string'       shift, and enter state 11
	'true'         shift, and enter state 45
	'void'         shift, and enter state 12
	'while'        shift, and enter state 105
	'{'            shift, and enter state 90
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	Block          goto state 92
	Stmt           goto state 160
	Type           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 160

	Stmt -> 'for' '(' Type Ident '=' Expr 'to' Expr ')' Stmt .    (rule 31)

	'!'            reduce using rule 31
	'('            reduce using rule 31
	'-'            reduce using rule 31
	';'            reduce using rule 31
	'boolean'      reduce using rule 31
	'break'        reduce using rule 31
	'continue'     reduce using rule 31
	'else'         reduce using rule 31
	'false'        reduce using rule 31
	'final'        reduce using rule 31
	'for'          reduce using rule 31
	'fun'          reduce using rule 31
	'if'           reduce using rule 31
	'int'          reduce using rule 31
	'lambda'       reduce using rule 31
	'print'        reduce using rule 31
	'return'       reduce using rule 31
	'string'       reduce using rule 31
	'true'         reduce using rule 31
	'void'         reduce using rule 31
	'while'        reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	L_Ident        reduce using rule 31
	L_integ        reduce using rule 31
	L_quoted       reduce using rule 31


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 82
Number of terminals: 46
Number of non-terminals: 27
Number of states: 161
